using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace FirstPlayableLauralynnTrainor
{
    internal class Program
    {
        static Encoding asciiEncoder = Encoding.GetEncoding("IBM437");
        static string borderHorizontal = ($"{asciiEncoder.GetString(new byte[1] { 205 })}");
        static string borderVertical = ($"{asciiEncoder.GetString(new byte[1] { 186 })}");
        static string borderTL = ($"{asciiEncoder.GetString(new byte[1] { 214 })}");
        static string borderTR = ($"{asciiEncoder.GetString(new byte[1] { 184 })}");
        static string borderBL = ($"{asciiEncoder.GetString(new byte[1] { 212 })}");
        static string borderBR = ($"{asciiEncoder.GetString(new byte[1] { 189 })}");
        static string topHalf = ($"{asciiEncoder.GetString(new byte[1] { 223 })}");
        static string botHalf = ($"{asciiEncoder.GetString(new byte[1] { 220 })}");
        static string roadLine = ($"{asciiEncoder.GetString(new byte[1] { 179 })}");
        static char health = Convert.ToChar(3);
        static void Main(string[] args)
        {
            DisplayMap(1);
            Console.ReadKey(true);
        }
        static void DisplayMap(int s)
        {
            DisplayBorderTop(s);
            for (int x = 0; x < map.GetLength(0); x++)
            {

                for (int p = 0; p < s; p++)
                {
                Console.Write(borderVertical);
                for (int y = 0; y < map.GetLength(1); y++)
                {
                    for (int z = 0; z < s; z++)
                     {
                            if (map[x, y] == '`')
                            {
                                ColorChange(ConsoleColor.Black, ConsoleColor.White);
                                Console.Write(topHalf);
                            }
                            else if (map[x, y] == '~')
                            {
                                ColorChange(ConsoleColor.Black, ConsoleColor.White);
                                Console.Write(botHalf);
                            }
                            else if (map[x, y] == '>')
                            {
                                ColorChange(ConsoleColor.Gray, ConsoleColor.Black);
                                Console.Write(">");
                            }
                            else if (map[x, y] == '!')
                            {
                                ColorChange(ConsoleColor.DarkGray, ConsoleColor.White);
                                Console.Write("!");
                            }
                            else if (map[x, y] == '?')
                            {
                                ColorChange(ConsoleColor.DarkYellow, ConsoleColor.Black);
                                Console.Write("?");
                            }
                            else if (map[x, y] == '^')
                            {
                                ColorChange(ConsoleColor.DarkYellow, ConsoleColor.Red);
                                Console.Write(topHalf);
                            }
                            else if (map[x, y] == '*')
                            {
                                ColorChange(ConsoleColor.DarkGray, ConsoleColor.Red);
                                Console.Write(botHalf);
                            }
                            else if (map[x, y] == '#')
                            {
                                ColorChange(ConsoleColor.DarkGreen, ConsoleColor.Green);
                                Console.Write('#');
                            }
                            else if (map[x, y] == '<')
                            {
                                ColorChange(ConsoleColor.DarkGray, ConsoleColor.DarkYellow);
                                Console.Write(botHalf);
                            }
                            else if (map[x, y] == '@')
                            {
                                ColorChange(ConsoleColor.Gray, ConsoleColor.Black);
                                Console.Write(topHalf);
                            }
                            else if (map[x, y] == '$')
                            {
                                ColorChange(ConsoleColor.Gray, ConsoleColor.White);
                                Console.Write(topHalf);
                            }
                            else if (map[x, y] == 'r')
                            {
                                ColorChange(ConsoleColor.Black, ConsoleColor.DarkGray);
                                Console.Write('r');
                            }
                            else if (map[x, y] == 'p')
                            {
                                ColorChange(ConsoleColor.Red, ConsoleColor.Red);
                                Console.Write('p');
                            }
                            else if (map[x, y] == 'b')
                            {
                                ColorChange(ConsoleColor.DarkBlue, ConsoleColor.DarkBlue);
                                Console.Write('b');
                            }
                            else if (map[x, y] == 'v')
                            {
                                ColorChange(ConsoleColor.Magenta, ConsoleColor.Magenta);
                                Console.Write('v');
                            }
                            else if (map[x, y] == 'l')
                            {
                                ColorChange(ConsoleColor.Blue, ConsoleColor.Blue);
                                Console.Write('l');
                            }
                            else if (map[x, y] == 'i')
                            {
                                ColorChange(ConsoleColor.Black, ConsoleColor.White);
                                Console.Write(roadLine);
                            }
                        }
                }
                ColorChange(ConsoleColor.Black, ConsoleColor.White);
                Console.Write(borderVertical);
                Console.Write("\n");
                 }

            }
            DisplayBorderBottom(s);
            Console.WriteLine("DisplayMap(" + s + ")");
            //DisplayLegend();
        }
        static void DisplayBorderTop(int s)
        {
            Console.Write(borderTL);
            for (int i = 0; i < map.GetLength(1) * s; i++)
            {
                Console.Write(borderHorizontal);
            }
            Console.Write(borderTR);
            ColorChange(ConsoleColor.Black, ConsoleColor.White);
            Console.WriteLine();
        }
        static void DisplayBorderBottom(int s)
        {
            Console.Write(borderBL);
            for (int i = 0; i < map.GetLength(1) * s; i++)
            {
                Console.Write(borderHorizontal);
            }
            Console.Write(borderBR);
            ColorChange(ConsoleColor.Black, ConsoleColor.White);
            Console.WriteLine();
        }
        static void ColorChange(ConsoleColor background, ConsoleColor foreground)
        {
            Console.BackgroundColor = background;
            Console.ForegroundColor = foreground;
        }
        //    static char[,] map = new char[,] // dimensions defined by following data:
        //{
        //        {'`','~','`','~','`','~','`','~','`','~','!','!','?','?','?','?','?','?','?','?','?','?','?','!','?','?','?','?','?','?'},
        //        {'`','~','`','~','`','~','`','~','`','~','!','!','?','?','?','?','?','?','?','?','?','?','?','!','?','?','?','?','?','?'},
        //        {'`','~','`','~','`','~','`','~','`','~','>','?','?','?','?','?','?','?','?','?','?','?','?','>','?','?','?','?','?','?'},
        //        {'!','!','!','!','!','!','!','!','`','~','!','!','?','?','?','?','?','!','?','?','?','?','?','!','!','!','!','!','!','!'},
        //        {'?','?','?','?','?','?','!','!','`','~','!','!','?','?','?','?','?','!','?','?','?','?','?','!','!','~','`','~','`','~'},
        //        {'?','?','?','?','?','?','?','>','`','~','!','!','?','?','?','?','?','!','?','?','?','?','?','!','!','~','`','~','`','~'},
        //        {'?','?','?','?','?','?','!','!','`','~','!','!','?','?','?','?','?','!','!','!','!','!','!','!','!','~','`','~','`','~'},
        //        {'!','!','!','!','!','!','!','!','`','~','!','!','!','!','!','!','!','!','`','~','`','~','`','~','`','~','`','~','`','~'},
        //        {'`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~'},
        //        {'`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~'},
        //        {'`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~'},
        //        {'`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~'},
        //       };
        //}
        static char[,] map = new char[,] // dimensions defined by following data:
        {
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','!','!','!','!','!','!','!','!','!','!','!','!','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','!','!','!','!','!','?','?','?','?','?','?','?','?','?','?','?','?','?','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','?','?','?','?','!','?','?','?','?','?','?','?','?','?','?','?','?','?','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','!','!','!','!','!','!','!','!','!','!','!','!','?','?','?','?','!','?','?','?','?','?','?','!','<','<','*','*','<','<','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','`','~','`','~','`','~','`','~','`','~','!','!','?','?','?','?','?','?','?','?','?','?','?','!','?','?','?','?','?','?','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','`','~','`','~','`','~','`','~','`','~','!','!','?','?','?','?','?','?','?','?','?','?','?','!','?','?','?','?','?','?','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','`','~','`','~','`','~','`','~','`','~','>','?','?','?','?','?','?','?','?','?','?','?','?','>','?','?','?','?','?','?','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','!','!','!','!','!','!','!','!','`','~','!','!','?','?','?','?','?','!','?','?','?','?','?','!','!','!','!','!','!','!','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','?','?','?','?','?','?','!','!','`','~','!','!','?','?','?','?','?','!','?','?','?','?','?','!','!','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','?','?','?','?','?','?','?','>','`','~','!','!','?','?','?','?','?','!','?','?','?','?','?','!','!','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','?','?','?','?','?','?','!','!','`','~','!','!','?','?','?','?','?','!','!','!','!','!','!','!','!','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','!','!','!','!','!','!','!','!','`','~','!','!','!','!','!','!','!','!','`','~','`','~','`','~','`','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','`','~','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','!','!','!','!','!','!','!','!','!','!','!','!','!','!','!','@','$','@','$','!','!','!','!','!','!','!','!','!','!','!','!','!','!','!','#','#','#','#','#','#','#','#','#','#','#','#','#',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','r','r','r','r','#','#','#','#','#','#','#','r','r','r','r','i','b','b','b','i','p','p','p','i','r','r','r','i','r','r','r','i',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','r','r','r','r','#','#','#','#','#','#','#','r','r','r','r','i','b','b','b','i','p','p','p','i','r','r','r','i','r','r','r','i',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','r','r','r','r','#','#','#','#','#','#','#','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r','r',},
            {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','r','r','r','r','#','#','#','#','#','#','#','r','r','r','r','i','l','l','l','i','v','v','v','i','r','r','r','i','r','r','r','i',},
               };
    }

    /*legend
    ` = black
    ~ = white
    ! = darkgray
    ? = darkyellow
    > = gray
    */
}
